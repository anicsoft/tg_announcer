version: "3.9"

services:

  # Bot API service
  bot-api:
    environment:
      TELEGRAM_WEB_APP_URL: https://${NGROK_DOMAIN}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      BACKEND_URL: http://backend:8888
      NGROK_DOMAIN: ${NGROK_DOMAIN}
    restart: on-failure
    build:
      context: bot

  # Bot UI in development mode
  bot-ui:
    restart: on-failure
    environment:
      BACKEND_HOST: backend
      BACKEND_PORT: ${BACKEND_PORT}
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/index.html:/app/index.html
      - ./frontend/vite.config.ts:/app/vite.config.ts
    build:
      context: ./frontend
      dockerfile: dev.dockerfile

  db:
    env_file:
      - .env
    image: postgres:latest
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - ./data/db:/var/lib/postgresql/data

  backend:
    env_file:
      - .env
    restart: on-failure
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - POSTGRES_HOST=db
    depends_on:
      - db
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    command: ./application --host 0.0.0.0 --port ${BACKEND_PORT}

  migrator:
    build:
      context: .
      dockerfile: migration.Dockerfile
    restart: on-failure
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=db
    command:
      - ./migration.sh


  # Nginx proxy to forward request to UI and API
  dev-proxy:
    image: nginx:stable-alpine
    environment:
      PORT: 3000
      API_URL: http://bot-api:3000
      UI_URL: http://bot-ui:3000
      BACKEND_URL: http://backend:8888
    restart: on-failure
    volumes:
      - ./proxy.template:/etc/nginx/templates/default.conf.template

  # Ngrok service
  ngrok:
    image: ngrok/ngrok:alpine
    environment:
      NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN}
    restart: on-failure
    command: ["http", "--domain=${NGROK_DOMAIN}", "dev-proxy:3000", "--log=stdout"]

volumes:
  postgres-data: