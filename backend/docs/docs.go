// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/announcements": {
            "post": {
                "description": "Only users with a \"business\" user_type can access this endpoint. The company_id in the request must match the company_id of the user making the request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "announcements"
                ],
                "summary": "Create an announcement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "tma initData",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "request body",
                        "name": "announcement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AddAnnouncement"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.AddAnnouncementResponse"
                        }
                    },
                    "401": {
                        "description": "failed to decode body",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    },
                    "403": {
                        "description": "not allowed",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    }
                }
            }
        },
        "/announcements/filter": {
            "post": {
                "description": "Filter body is used to apply various filters to the announcements query.\nCategories: A list of category names to filter the announcements by (e.g., \"Special Offer\").\nPromoCode: Set to true to retrieve announcements with a promo code.\nLatitude and Longitude: The user's location, used to calculate and return the distance to the user in meters.\nSortBy: The field to sort the results by (e.g., \"distance\").\nSortOrder: The order of sorting, either \"asc\" for ascending or \"desc\" for descending.\nPageSize: The number of results to return per page.\nOffset: The number of results to skip before starting to return results.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "announcements"
                ],
                "summary": "Returns list of announcements",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Filter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AnnouncementResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    }
                }
            }
        },
        "/announcements/{id}": {
            "get": {
                "description": "Returns full announcement info.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "announcements"
                ],
                "summary": "Get announcement",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "announcement id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    }
                }
            }
        },
        "/announcements/{id}/image": {
            "get": {
                "description": "Retrieves an image from S3 based on the provided entity ID and returns it as a JPEG.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "image/jpeg"
                ],
                "tags": [
                    "announcements"
                ],
                "summary": "Fetch an image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image data",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    }
                }
            },
            "post": {
                "description": "Uploads a logo image for an announcement to S3 and updates the entity's record with the S3 URL.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "announcements"
                ],
                "summary": "Upload a logo image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "announcements ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Logo image file",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully uploaded",
                        "schema": {
                            "$ref": "#/definitions/api.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    }
                }
            }
        },
        "/categories/business": {
            "get": {
                "description": "List business categories",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "List business categories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Category"
                            }
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    }
                }
            },
            "post": {
                "description": "Add new business category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Add business category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "tma initData",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "request body",
                        "name": "announcement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AddCategory"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Category"
                        }
                    },
                    "400": {
                        "description": "failed to decode body",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    }
                }
            }
        },
        "/categories/offer": {
            "get": {
                "description": "List offer categories",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "List offer categories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Category"
                            }
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    }
                }
            },
            "post": {
                "description": "Add new offer category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Add offer category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "tma initData",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "request body",
                        "name": "announcement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AddCategory"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Category"
                        }
                    },
                    "400": {
                        "description": "failed to decode body",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    }
                }
            }
        },
        "/companies": {
            "post": {
                "description": "Only for admins",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "companies"
                ],
                "summary": "Adds company to database",
                "parameters": [
                    {
                        "type": "string",
                        "description": "tma initData",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "request body",
                        "name": "announcement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AddCompanyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.AddCompanyResponse"
                        }
                    },
                    "400": {
                        "description": "failed to decode body",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    }
                }
            }
        },
        "/companies/{id}": {
            "get": {
                "description": "Only for admins",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "companies"
                ],
                "summary": "Returns company by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "request body",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Company"
                        }
                    },
                    "400": {
                        "description": "failed to decode body",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    }
                }
            }
        },
        "/companies/{id}/logo": {
            "get": {
                "description": "Retrieves a logo image from S3 based on the provided entity ID and returns it as a JPEG.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "image/jpeg"
                ],
                "tags": [
                    "companies"
                ],
                "summary": "Fetch a logo image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image data",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    }
                }
            },
            "post": {
                "description": "Uploads a logo image for a company to S3 and updates the entity's record with the S3 URL.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "companies"
                ],
                "summary": "Upload a logo image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "company ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Logo image file",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully uploaded",
                        "schema": {
                            "$ref": "#/definitions/api.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    }
                }
            }
        },
        "/users": {
            "patch": {
                "description": "This endpoint is restricted to admin users only. It updates the user_type to either \"business\" or \"user\". If the user_type is set to \"business\", you must also provide the company_id that the user belongs to.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "tma initData",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "request body",
                        "name": "announcement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "failed to decode body",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Returns full user info.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/api.HttpError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.HttpError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "api.Response": {
            "type": "object",
            "properties": {
                "data": {}
            }
        },
        "model.AddAnnouncement": {
            "type": "object",
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Special Offer"
                    ]
                },
                "company_id": {
                    "type": "string",
                    "example": "0e3df004-ca0c-45a3-aeee-fa21c4aa3e4d"
                },
                "content": {
                    "type": "string",
                    "example": "\u003ch1\u003eHello, World!\u003c/h1\u003e"
                },
                "end_date_time": {
                    "type": "string",
                    "example": "2024-05-06T20:00:00.000000+00:00"
                },
                "promo_code": {
                    "type": "string",
                    "example": "null"
                },
                "start_date_time": {
                    "type": "string",
                    "example": "2024-05-06T20:00:00.000000+00:00"
                },
                "title": {
                    "type": "string",
                    "example": "We have free food!"
                }
            }
        },
        "model.AddAnnouncementResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "0e3df004-ca0c-45a3-aeee-fa21c4aa3e4d"
                }
            }
        },
        "model.AddCategory": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Business Lunch"
                }
            }
        },
        "model.AddCompanyRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "Tartu, Estonia"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Food \u0026 Drinks"
                    ]
                },
                "description": {
                    "type": "string",
                    "example": "Traditional Estonian bakery"
                },
                "latitude": {
                    "type": "number",
                    "example": 58.378
                },
                "longitude": {
                    "type": "number",
                    "example": 26.7296
                },
                "name": {
                    "type": "string",
                    "example": "Tartu Bakery"
                }
            }
        },
        "model.AddCompanyResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "1"
                }
            }
        },
        "model.Announcement": {
            "type": "object",
            "properties": {
                "announcement_id": {
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Special Offer"
                    ]
                },
                "company": {
                    "$ref": "#/definitions/model.Company"
                },
                "company_id": {
                    "type": "string",
                    "example": "0e3df004-ca0c-45a3-aeee-fa21c4aa3e4d"
                },
                "content": {
                    "type": "string",
                    "example": "\u003ch1\u003eHello World!\u003c/h1\u003e"
                },
                "created_at": {
                    "type": "string"
                },
                "distance": {
                    "type": "number",
                    "example": 99
                },
                "end_date_time": {
                    "type": "string",
                    "example": "2024-05-01T12:00:00.000000+00:00"
                },
                "picture_url": {
                    "type": "string"
                },
                "promo_code": {
                    "type": "string",
                    "example": "PROMO|null"
                },
                "start_date_time": {
                    "type": "string",
                    "example": "2024-05-06T20:00:00.000000+00:00"
                },
                "title": {
                    "type": "string",
                    "example": "We have free food!"
                }
            }
        },
        "model.AnnouncementResponse": {
            "type": "object",
            "properties": {
                "announcements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Announcement"
                    }
                }
            }
        },
        "model.Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.Company": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "Company Address"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Company Categories"
                    ]
                },
                "company_id": {
                    "type": "string",
                    "example": "0e3df004-ca0c-45a3-aeee-fa21c4aa3e4d"
                },
                "description": {
                    "type": "string",
                    "example": "Company Description"
                },
                "distance_to_user": {
                    "type": "number"
                },
                "latitude": {
                    "type": "number",
                    "example": 37.8483
                },
                "logo_url": {
                    "type": "string"
                },
                "longitude": {
                    "type": "number",
                    "example": 46.8483
                },
                "name": {
                    "type": "string",
                    "example": "Company"
                }
            }
        },
        "model.Filter": {
            "type": "object",
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Special Offer"
                    ]
                },
                "company_id": {
                    "type": "string",
                    "example": "0e3df004-ca0c-45a3-aeee-fa21c4aa3e4d"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-05-06T20:00:00.000000+00:00"
                },
                "end_date_time": {
                    "type": "string",
                    "example": "2024-05-06T20:00:00.000000+00:00"
                },
                "latitude": {
                    "type": "number",
                    "example": 58.3854
                },
                "longitude": {
                    "type": "number",
                    "example": 24.4971
                },
                "offset": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "promo_code": {
                    "type": "boolean",
                    "example": true
                },
                "sort_by": {
                    "type": "string",
                    "example": "start_date_time"
                },
                "sort_order": {
                    "type": "string",
                    "example": "desc"
                },
                "start_date_time": {
                    "type": "string",
                    "example": "2024-05-06T20:00:00.000000+00:00"
                }
            }
        },
        "model.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "company_id": {
                    "type": "string",
                    "example": "123442354"
                },
                "user_id": {
                    "type": "integer",
                    "example": 0
                },
                "user_type": {
                    "type": "string",
                    "example": "user|business"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "localhost:8888",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Announcement bot API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
